{"version":3,"file":"static/js/653.4d53b6d4.chunk.js","mappings":"yPAEaA,EAAcC,EAAAA,GAAAA,GAAH,qIAGR,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,UACtB,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,SAIrCC,EAAgBN,EAAAA,GAAAA,GAAH,qLAQf,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOI,aAG1BC,EAAcR,EAAAA,GAAAA,EAAH,0K,SClBT,SAASS,EAAT,GAAkC,IAAXC,EAAU,EAAVA,OAC5BC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QAEhB,OACE,UAACb,EAAD,YACE,UAACO,EAAD,eAAiBK,MACjB,SAACH,EAAD,UAAcI,OCPb,IAAMC,EAAmBb,EAAAA,GAAAA,EAAH,gQAWlB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOW,UCPjCC,EAAS,IAAIC,EAAAA,EAEJ,SAASC,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACRV,EACGW,kBAAkBH,GAClBI,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPR,EAAWQ,MAEZC,OAAM,SAAAR,GAAK,OAAIC,EAASD,QAC1B,CAACE,KAGF,iCACE,0BACE,wBACGJ,GACCA,EAAQW,KAAI,SAAApB,GAAM,OAChB,SAACD,EAAD,CAA6BC,OAAQA,GAAnBA,EAAOqB,YAK/BV,GAASF,GAA8B,IAAnBA,EAAQa,SAC5B,SAACnB,EAAD,uDAIDQ,IACC,SAACR,EAAD,+D,4HCtCFoB,EAAU,mCACVC,EAAU,6BAEKlB,EAAAA,WACnB,cAAe,eACbmB,KAAKC,KAAO,EAuDb,OAtDA,8EACD,oGACyBC,IAAAA,IAAA,UAClBH,EADkB,yCACsBD,EADtB,iBACsCE,KAAKC,OAFpE,cACQE,EADR,yBAKSA,EAASC,MALlB,kGADC,IACD,mEAQA,WAAyBC,GAAzB,uFACyBH,IAAAA,IAAA,UAClBH,EADkB,mCACgBD,EADhB,iBACgCE,KAAKC,KADrC,kBACmDI,EADnD,wCADzB,cACQF,EADR,yBAKSA,EAASC,MALlB,mGARA,IAQA,kEAQA,WAAwBhB,GAAxB,uFACyBc,IAAAA,IAAA,UAClBH,EADkB,oBACCX,EADD,oBACoBU,EADpB,oBADzB,cACQK,EADR,yBAISA,EAASC,MAJlB,8FARA,IAQA,iEAOA,WAAuBhB,GAAvB,uFACyBc,IAAAA,IAAA,UAClBH,EADkB,oBACCX,EADD,4BAC4BU,EAD5B,oBADzB,cACQK,EADR,yBAKSA,EAASC,MALlB,8FAPA,IAOA,kEAQA,WAAwBhB,GAAxB,uFACyBc,IAAAA,IAAA,UAClBH,EADkB,oBACCX,EADD,4BAC4BU,EAD5B,gCAC2DE,KAAKC,OAFzF,cACQE,EADR,yBAKSA,EAASC,MALlB,mGARA,IAQA,qBAQA,WACEJ,KAAKC,MAAQ,IACd,uBAED,WACED,KAAKC,KAAO,IACb,iBAED,WACE,OAAOD,KAAKK,aACb,IAED,SAAUC,GACRN,KAAKK,YAAcC,MACpB,EAzDkBzB","sources":["components/ReviewsList/ReviewsList.styled.js","components/ReviewsList/ReviewsList.js","pages/Reviews/Reviews.styled.js","pages/Reviews/Reviews.js","service/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsItem = styled.li`\n  padding: 10px;\n  list-style: none;\n  background: ${props => props.theme.colors.bgGrey};\n  border: 1px solid ${props => props.theme.colors.white};\n  margin-bottom: 20px;\n`;\n\nexport const ReviewsAuthor = styled.h2`\n  margin: 0;\n  padding: 10px;\n  font-style: normal;\n  font-weight: 900;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: 0.06em;\n  color: ${props => props.theme.colors.baseColor};\n`;\n\nexport const ReviewsText = styled.p`\n  margin: 0;\n  padding: 5px 10px;\n  font-style: italic;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 2;\n  letter-spacing: 0.04em;\n`;\n","import PropTypes from 'prop-types';\nimport { ReviewsItem, ReviewsAuthor, ReviewsText } from './ReviewsList.styled';\n\nexport default function ReviewsList({ review }) {\n  const { author, content } = review;\n\n  return (\n    <ReviewsItem>\n      <ReviewsAuthor> {author}</ReviewsAuthor>\n      <ReviewsText>{content}</ReviewsText>\n    </ReviewsItem>\n  );\n}\n\nReviewsList.propTypes = {\n  review: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const ContainerReviews = styled.p`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  margin: 0;\n  padding: 20px;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 36px;\n  line-height: 1.62;\n  letter-spacing: 0.06em;\n  color: ${props => props.theme.colors.orange};\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ApiService from '../../service/movies-api';\nimport ReviewsList from '../../components/ReviewsList/ReviewsList';\nimport { ContainerReviews } from './Reviews.styled';\n\nconst newApi = new ApiService();\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState('');\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    newApi\n      .fetchMovieReviews(movieId)\n      .then(({ results }) => {\n        setReviews(results);\n      })\n      .catch(error => setError(error));\n  }, [movieId]);\n\n  return (\n    <>\n      <div>\n        <ul>\n          {reviews &&\n            reviews.map(review => (\n              <ReviewsList key={review.id} review={review} />\n            ))}\n        </ul>\n      </div>\n\n      {!error && reviews && reviews.length === 0 && (\n        <ContainerReviews>\n          We don't have any reviews for this movie\n        </ContainerReviews>\n      )}\n      {error && (\n        <ContainerReviews>\n          Sorry, there was an error, please try again\n        </ContainerReviews>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\nconst API_KEY = 'd16c53a3a4d5eb154f379745597d6181';\nconst baseURL = 'https://api.themoviedb.org';\n\nexport default class ApiService {\n  constructor() {\n    this.page = 1;\n  }\n  async fetchTrendingMovies() {\n    const response = await axios.get(\n      `${baseURL}/3/trending/movie/day?api_key=${API_KEY}&page=${this.page}`\n    );\n    // console.log(response.data);\n    return response.data;\n  }\n\n  async fetchMovieForQuery(searchValue) {\n    const response = await axios.get(\n      `${baseURL}/3/search/movie?api_key=${API_KEY}&page=${this.page}&query=${searchValue}&language=en-US&include_adult=false`\n    );\n    // console.log(response.data);\n    return response.data;\n  }\n\n  async fetchMovieDetails(movieId) {\n    const response = await axios.get(\n      `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  }\n\n  async fetchMovieActors(movieId) {\n    const response = await axios.get(\n      `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    // console.log(response.data);\n    return response.data;\n  }\n\n  async fetchMovieReviews(movieId) {\n    const response = await axios.get(\n      `${baseURL}/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=${this.page}`\n    );\n    // console.log(response.data);\n    return response.data;\n  }\n\n  pageAdd() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchValue;\n  }\n\n  set query(newValue) {\n    this.searchValue = newValue;\n  }\n}\n"],"names":["ReviewsItem","styled","props","theme","colors","bgGrey","white","ReviewsAuthor","baseColor","ReviewsText","ReviewsList","review","author","content","ContainerReviews","orange","newApi","ApiService","Reviews","useState","reviews","setReviews","error","setError","movieId","useParams","useEffect","fetchMovieReviews","then","results","catch","map","id","length","API_KEY","baseURL","this","page","axios","response","data","searchValue","newValue"],"sourceRoot":""}