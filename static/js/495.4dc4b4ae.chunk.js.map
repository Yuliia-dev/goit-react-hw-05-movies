{"version":3,"file":"static/js/495.4dc4b4ae.chunk.js","mappings":"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","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.js","pages/Cast/Cast.styled.js","pages/Cast/Cast.js","service/GetFormatData.js","service/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorItem = styled.li`\n  padding: 10px;\n  max-width: 300px;\n  max-height: 550px;\n  list-style: none;\n  background: ${props => props.theme.colors.bgGrey};\n  border: 1px solid ${props => props.theme.colors.white};\n  border-radius: 3%;\n  margin-bottom: 20px;\n`;\n\nexport const ActorImg = styled.img`\n  min-width: 300px;\n  height: 424px;\n  margin-right: 20px;\n  border-radius: 3%;\n  overflow: hidden;\n`;\n\nexport const ActorName = styled.h2`\n  margin: 0;\n  padding: 10px 0;\n  font-style: normal;\n  font-weight: 900;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: 0.06em;\n  color: ${props => props.theme.colors.baseColor};\n`;\n\nexport const ActorRole = styled.h3`\n  margin: 0;\n  padding: 5px 0;\n  font-style: italic;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 1;\n  letter-spacing: 0.02em;\n  color: ${props => props.theme.colors.baseColor};\n`;\n","import PropTypes from 'prop-types';\nimport { ActorItem, ActorImg, ActorName, ActorRole } from './CastList.styled';\n\nexport default function CastList({ actor }) {\n  const { name, profile_path, character } = actor;\n\n  return (\n    <div>\n      <ActorItem>\n        <ActorImg src={profile_path} alt={name} height=\"450\" width=\"250\" />\n        <ActorName> {name}</ActorName>\n        <ActorRole>Role: {character}</ActorRole>\n      </ActorItem>\n    </div>\n  );\n}\n\nCastList.propTypes = {\n  actor: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    profile_path: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const CardActors = styled.div`\n  padding: 0 20px;\n`;\n\nexport const ActorList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  align-items: center;\n  padding: 10px;\n  border-radius: 4px;\n  margin: 0;\n  padding: 20px 0;\n`;\n\nexport const ContainerError = styled.p`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  margin: 0;\n  padding: 20px;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 36px;\n  line-height: 1.62;\n  letter-spacing: 0.06em;\n  color: ${props => props.theme.colors.orange};\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ApiService from '../../service/movies-api';\nimport CastList from '../../components/CastList/CastList';\nimport { FormatCast } from '../../service/GetFormatData';\nimport { CardActors, ActorList, ContainerError } from './Cast.styled';\n\nconst newApi = new ApiService();\n\nexport default function Cast() {\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    newApi\n      .fetchMovieActors(movieId)\n      .then(({ cast }) => {\n        const formats = FormatCast(cast);\n        setActors(formats);\n      })\n      .catch(error => setError(error));\n  }, [movieId]);\n\n  return (\n    <>\n      <CardActors>\n        <ActorList>\n          {actors &&\n            actors.map(actor => <CastList key={actor.id} actor={actor} />)}\n        </ActorList>\n      </CardActors>\n\n      {error && (\n        <ContainerError>\n          Sorry, there was an error, please try again\n        </ContainerError>\n      )}\n    </>\n  );\n}\n","export function FormatMovie(movie) {\n  if (movie) {\n    return movie.map(res => ({\n      id: res.id,\n      title: res.title,\n      poster_path: res.poster_path\n        ? `https://image.tmdb.org/t/p/w300/${res.poster_path}`\n        : 'https://webhostingmedia.net/wp-content/uploads/2018/01/http-error-404-not-found.png',\n    }));\n  }\n}\n\nexport function FormatCast(actors) {\n  if (actors) {\n    return actors.map(res => ({\n      id: res.id,\n      name: res.name,\n      profile_path: res.profile_path\n        ? `https://image.tmdb.org/t/p/w300/${res.profile_path}`\n        : 'https://webhostingmedia.net/wp-content/uploads/2018/01/http-error-404-not-found.png',\n      character: res.character,\n    }));\n  }\n}\n\nexport function FormatMovieDetailsPage({\n  id,\n  title,\n  poster_path,\n  vote_average,\n  overview,\n  genres,\n}) {\n  const movie = {\n    id: id,\n    title: title,\n    poster_path: poster_path\n      ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n      : 'https://webhostingmedia.net/wp-content/uploads/2018/01/http-error-404-not-found.png',\n    vote_average: vote_average * 10,\n    overview: overview,\n    genres: genres,\n  };\n  return movie;\n}\n","import axios from 'axios';\nconst API_KEY = 'd16c53a3a4d5eb154f379745597d6181';\nconst baseURL = 'https://api.themoviedb.org';\n\nexport default class ApiService {\n  constructor() {\n    this.page = 1;\n  }\n  async fetchTrendingMovies() {\n    const response = await axios.get(\n      `${baseURL}/3/trending/movie/day?api_key=${API_KEY}&page=${this.page}`\n    );\n    // console.log(response.data);\n    return response.data;\n  }\n\n  async fetchMovieForQuery(searchValue) {\n    const response = await axios.get(\n      `${baseURL}/3/search/movie?api_key=${API_KEY}&page=${this.page}&query=${searchValue}&language=en-US&include_adult=false`\n    );\n    // console.log(response.data);\n    return response.data;\n  }\n\n  async fetchMovieDetails(movieId) {\n    const response = await axios.get(\n      `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  }\n\n  async fetchMovieActors(movieId) {\n    const response = await axios.get(\n      `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    // console.log(response.data);\n    return response.data;\n  }\n\n  async fetchMovieReviews(movieId) {\n    const response = await axios.get(\n      `${baseURL}/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=${this.page}`\n    );\n    // console.log(response.data);\n    return response.data;\n  }\n\n  pageAdd() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchValue;\n  }\n\n  set query(newValue) {\n    this.searchValue = newValue;\n  }\n}\n"],"names":["ActorItem","styled","props","theme","colors","bgGrey","white","ActorImg","ActorName","baseColor","ActorRole","CastList","actor","name","profile_path","character","src","alt","height","width","CardActors","ActorList","ContainerError","orange","newApi","ApiService","Cast","useState","actors","setActors","error","setError","movieId","useParams","useEffect","fetchMovieActors","then","cast","formats","FormatCast","catch","map","id","FormatMovie","movie","res","title","poster_path","FormatMovieDetailsPage","vote_average","overview","genres","API_KEY","baseURL","this","page","axios","response","data","searchValue","newValue"],"sourceRoot":""}